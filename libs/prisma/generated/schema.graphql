### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumMoodTypeFieldUpdateOperationsInput {
  set: MoodType
}

input EnumMoodTypeFilter {
  equals: MoodType
  in: [MoodType!]
  not: NestedEnumMoodTypeFilter
  notIn: [MoodType!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mood {
  createdAt: DateTime!
  id: Int!
  intesity: Int
  mood: MoodType!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input MoodCreateNestedManyWithoutUserInput {
  connect: [MoodWhereUniqueInput!]
  connectOrCreate: [MoodCreateOrConnectWithoutUserInput!]
  create: [MoodCreateWithoutUserInput!]
}

input MoodCreateOrConnectWithoutUserInput {
  create: MoodCreateWithoutUserInput!
  where: MoodWhereUniqueInput!
}

input MoodCreateWithoutUserInput {
  createdAt: DateTime
  intesity: Int
  mood: MoodType!
  title: String!
  updatedAt: DateTime
}

input MoodScalarWhereInput {
  AND: [MoodScalarWhereInput!]
  NOT: [MoodScalarWhereInput!]
  OR: [MoodScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  intesity: IntNullableFilter
  mood: EnumMoodTypeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

enum MoodType {
  ANXIOUS
  FEARFUL
  HAPPY
  SAD
}

input MoodUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  intesity: NullableIntFieldUpdateOperationsInput
  mood: EnumMoodTypeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MoodUpdateManyWithWhereWithoutUserInput {
  data: MoodUpdateManyMutationInput!
  where: MoodScalarWhereInput!
}

input MoodUpdateManyWithoutUserInput {
  connect: [MoodWhereUniqueInput!]
  connectOrCreate: [MoodCreateOrConnectWithoutUserInput!]
  create: [MoodCreateWithoutUserInput!]
  delete: [MoodWhereUniqueInput!]
  deleteMany: [MoodScalarWhereInput!]
  disconnect: [MoodWhereUniqueInput!]
  set: [MoodWhereUniqueInput!]
  update: [MoodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MoodUpdateManyWithWhereWithoutUserInput!]
  upsert: [MoodUpsertWithWhereUniqueWithoutUserInput!]
}

input MoodUpdateWithWhereUniqueWithoutUserInput {
  data: MoodUpdateWithoutUserInput!
  where: MoodWhereUniqueInput!
}

input MoodUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  intesity: NullableIntFieldUpdateOperationsInput
  mood: EnumMoodTypeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MoodUpsertWithWhereUniqueWithoutUserInput {
  create: MoodCreateWithoutUserInput!
  update: MoodUpdateWithoutUserInput!
  where: MoodWhereUniqueInput!
}

input MoodWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumMoodTypeFilter {
  equals: MoodType
  in: [MoodType!]
  not: NestedEnumMoodTypeFilter
  notIn: [MoodType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

type Query {
  mood(where: MoodWhereUniqueInput!): Mood
  moods(after: MoodWhereUniqueInput, before: MoodWhereUniqueInput, first: Int, last: Int): [Mood!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  moods(after: MoodWhereUniqueInput, before: MoodWhereUniqueInput, first: Int, last: Int): [Mood!]!
  name: String
}

input UserCreateInput {
  email: String!
  moods: MoodCreateNestedManyWithoutUserInput
  name: String
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  moods: MoodUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
